-- LEVEL 1
-- 1. Write a SQL query to return the first and last names
-- of all actors in the database.
select actor.first_name, actor.last_name
from actor;

-- 2. Write a SQL query to return the titles of all films in the database,
-- along with their rental rates and replacement costs.
select film.title, film.rental_rate, film.replacement_cost
from film;

-- 3. Write a SQL query to return the top 5 most rented films in the database,
-- along with the number of times they have been rented.
select film.title, count(rental.rental_id) as rental_count
from film
         join inventory on film.film_id = inventory.film_id
         join rental on inventory.inventory_id = rental.inventory_id
group by film.title
order by rental_count desc limit 5;

-- 4. Write a SQL query to return the average rental duration
-- for each category of film in the database.
select category.name, avg(film.rental_duration) as avg_rental_duration
from category
         join film_category on category.category_id = film_category.category_id
         join film on film_category.film_id = film.film_id
group by category.name;

-- 5. Write a SQL query to return the names and addresses of all customers
-- who have rented a film in the month of January 2022.
select customer.first_name, customer.last_name, address.address
from customer
         join rental on customer.customer_id = rental.customer_id
         join inventory on rental.inventory_id = inventory.inventory_id
         join address on customer.address_id = address.address_id
where month (rental.rental_date) = 1 and year (rental.rental_date) = 2022;

-- 6. Write a SQL query to return the revenue generated by each
-- store in the database for the year 2021.
select store.store_id, sum(payment.amount) as revenue
from store
         join staff on store.store_id = staff.store_id
         join payment on staff.staff_id = payment.staff_id
where year (payment.payment_date) = 2021
group by store.store_id;

-- 7. Write a SQL query to return the names of all actors
-- who have appeared in more than 20 films in the database.
select actor.first_name, actor.last_name
from actor
         join film_actor on actor.actor_id = film_actor.actor_id
group by actor.first_name, actor.last_name
having count(film_actor.film_id) > 20;

-- 8. Write a SQL query to return the titles of all films in the database
-- that have a rating of 'PG-13' and a length of more than 120 minutes.
select film.title
from film
where film.rating = 'PG-13'
  and film.length > 120;

-- LEVEL 2
-- 1. Write a SQL query to return the top 10 customers who have generated the
-- most revenue for the store, including their names and total revenue generated.
select customer.first_name, customer.last_name, sum(payment.amount) as total_revenue
from customer
         join payment on customer.customer_id = payment.customer_id
group by customer.first_name, customer.last_name
order by total_revenue desc limit 10;

-- 2. Write a SQL query to return the names and contact information of all customers
-- who have rented films in all categories in the database.
-- select customer.first_name, customer.last_name, customer.email
-- from customer
-- join rental on customer.customer_id = rental.customer_id
-- join inventory on rental.inventory_id = inventory.inventory_id
-- join film on inventory.film_id = film.film_id
-- join film_category on film.film_id = film_category.film_id
-- group by customer.first_name, customer.last_name, customer.email
-- having count(distinct film_category.category_id) = (select count(*) from category);
with customer_category as (select c.customer_id, fc.category_id
                           from customer c
                                    join rental r on c.customer_id = r.customer_id
                                    join inventory i on r.inventory_id = i.inventory_id
                                    join film_category fc on i.film_id = fc.film_id)
select c.first_name, c.last_name, c.email
from customer c
         join customer_category cc on c.customer_id = cc.customer_id
group by c.first_name, c.last_name, c.email
having count(cc.category_id) = (select count(*) from category);

-- 3. Write a SQL query to return the titles of all films in the database
-- that have been rented at least once but never returned.
select f.title
from film f
         join inventory i on f.film_id = i.film_id
         join rental r on i.inventory_id = r.inventory_id
where r.return_date is null;

-- 4. Write a SQL query to return the names of all actors
-- who have appeared in at least one film in each category in the database.
with actor_category as (select a.actor_id, fc.category_id
                        from actor a
                                 join film_actor fa on a.actor_id = fa.actor_id
                                 join film_category fc on fa.film_id = fc.film_id)
select a.actor_id, a.first_name, a.last_name
from actor a
         join actor_category ac on a.actor_id = ac.actor_id
group by a.actor_id, a.first_name, a.last_name
having count(distinct ac.category_id) = (select count(*) from category);

-- 5. Write a SQL query to return the names of all customers who have rented the same film
-- more than once in a single transaction, along with the number of times they rented it.
select c.first_name, c.last_name, f.title, count(*) as rental_count
from customer c
         join rental r on c.customer_id = r.customer_id
         join inventory i on r.inventory_id = i.inventory_id
         join film f on i.film_id = f.film_id
         join payment p on r.rental_id = p.rental_id
group by c.customer_id, p.payment_id, f.film_id
having rental_count > 1;

-- 6. Write a SQL query to return the total revenue generated by each actor in the database,
-- based on the rental fees of the films they have appeared in.
select a.actor_id, a.first_name, a.last_name, sum(p.amount) as total_revenue
from actor a
         join film_actor fa on a.actor_id = fa.actor_id
         join inventory i on fa.film_id = i.film_id
         join rental r on i.inventory_id = r.inventory_id
         join payment p on p.rental_id = r.rental_id
group by a.actor_id, a.first_name, a.last_name
order by total_revenue desc;

-- 7. Write a SQL query to return the names of all actors who have appeared in at least one film
-- with a rating of 'R', but have never appeared in a film with a rating of 'G'.
select a.actor_id, a.first_name, a.last_name
from actor a
         join film_actor fa on fa.actor_id = a.actor_id
         join film f on fa.film_id = f.film_id
where f.rating = 'R'
  and not exists (select 1
                  from film f2
                           join film_actor fa2 on f2.film_id = fa2.film_id
                           join actor a2 on fa2.actor_id = a2.actor_id
                  where f2.rating = 'G'
                    and a2.actor_id = a.actor_id);

-- 8. Write a SQL query to return the titles of all films in the database that have been rented by more than 50 customers,
-- but have never been rented by the same customer more than once.
select f.title
from film f
         join inventory i on f.film_id = i.film_id
         join rental r on i.inventory_id = r.inventory_id
group by f.film_id, r.customer_id
having count(distinct r.customer_id) > 50
   and count(r.rental_id) = count(distinct r.customer_id);

-- 9. Write a SQL query to return the names of all customers who have rented a film from a category
-- they have never rented from before.
select distinct c.first_name, c.last_name
from customer c
         join rental r on c.customer_id = r.customer_id
         join inventory i on r.inventory_id = i.inventory_id
         join film_category fc on i.film_id = fc.film_id
where not exists(select 1
                 from rental r2
                          join inventory i2 on r2.inventory_id = i2.inventory_id
                          join film_category fc2 on i2.film_id = fc2.film_id
                 where r2.customer_id = c.customer_id
                   and fc2.category_id = fc.category_id
                   and r2.rental_date < r.rental_date);

-- 10. Write a SQL query to return the titles of all films in the database that have been rented by every customer
-- who has ever rented a film from the 'Action' category.
select f.title
from film f
         join inventory i on i.film_id = f.film_id
         join rental r on r.inventory_id = i.inventory_id
         join customer c on c.customer_id = r.customer_id
where c.customer_id in (select distinct r2.customer_id
                        from rental r2
                                 join inventory i2 on r2.inventory_id = i2.inventory_id
                                 join film_category fc2 on i2.film_id = fc2.film_id
                        where fc2.category_id = (select category_id from category where name = 'Action'))
group by f.film_id, f.title
having count(distinct c.customer_id) = (select count(distinct r3.customer_id)
                                        from rental r3
                                                 join inventory i3 on r3.inventory_id = i3.inventory_id
                                                 join film_category fc3 on i3.film_id = fc3.film_id
                                                 join category cat3 on fc3.category_id = cat3.category_id
                                        where cat3.name = 'Action');

-- LEVEL 3
-- 1. Write a SQL query to return the average rental duration for each combination of actor and category
-- in the database, excluding actors who have not appeared in any films in a category.
select a.first_name,
       a.last_name,
       c.name                                      as category_name,
       avg(datediff(r.return_date, r.rental_date)) AS avg_rental_duration
from actor a
         join film_actor fa on a.actor_id = fa.actor_id
         join film f on fa.film_id = f.film_id
         join film_category fc on f.film_id = fc.film_id
         join category c on fc.category_id = c.category_id
         join rental r on r.inventory_id = f.film_id
group by a.actor_id, c.category_id, a.first_name, a.last_name, c.name
having count(f.film_id) > 0;

-- 2. Write a SQL query to return the names of all actors who have appeared in a film
-- with a rating of 'R' and a length of more than 2 hours, but have never appeared in a film with a rating of 'G'.
select a.first_name, a.last_name
from actor a
         join film_actor fa on a.actor_id = fa.actor_id
         join film f on fa.film_id = f.film_id
where f.rating = 'R'
  and f.length > 120
  and not exists (select 1
                  from film f2
                           join film_actor fa2 on f2.film_id = fa2.film_id
                           join actor a2 on fa2.actor_id = a2.actor_id
                  where f2.rating = 'G'
                    and a2.actor_id = a.actor_id);

-- 3. Write a SQL query to return the names of all customers who have rented more than 10 films
-- in a single transaction, along with the number of films they rented and the total rental fee.
SELECT c.first_name,
       c.last_name,
       COUNT(r.rental_id) as films_rented,
       SUM(f.rental_rate) as total_rental_fee
FROM customer c
         JOIN rental r ON c.customer_id = r.customer_id
         JOIN inventory i ON r.inventory_id = i.inventory_id
         JOIN film f ON i.film_id = f.film_id
GROUP BY c.customer_id,
         c.first_name,
         c.last_name,
         r.rental_date
HAVING COUNT(r.rental_id) > 10
ORDER BY films_rented DESC;

-- 4. Write a SQL query to return the names of all customers who have rented every film in a category, 
-- along with the total number of films rented and the total rental fee.
WITH CategoryFilmCounts AS (
    -- Get total number of films in each category
    SELECT fc.category_id,
           COUNT(DISTINCT fc.film_id) as total_films
    FROM film_category fc
    GROUP BY fc.category_id),
     CustomerRentals AS (
         -- Get number of distinct films rented by customer per category
         SELECT r.customer_id,
                fc.category_id,
                COUNT(DISTINCT i.film_id) as films_rented,
                SUM(f.rental_rate)        as total_fees
         FROM rental r
                  JOIN inventory i ON r.inventory_id = i.inventory_id
                  JOIN film f ON i.film_id = f.film_id
                  JOIN film_category fc ON f.film_id = fc.film_id
         GROUP BY r.customer_id, fc.category_id)
SELECT c.first_name,
       c.last_name,
       cat.name as category_name,
       cr.films_rented,
       cr.total_fees
FROM customer c
         JOIN CustomerRentals cr ON c.customer_id = cr.customer_id
         JOIN category cat ON cr.category_id = cat.category_id
         JOIN CategoryFilmCounts cfc ON cr.category_id = cfc.category_id
WHERE cr.films_rented = cfc.total_films
ORDER BY c.last_name, c.first_name, cat.name;

-- 5. Write a SQL query to return the titles of all films in the database that have been rented by the same customer
-- more than once in a single day, along with the names of the customers who rented them and the number of times they were rented.
WITH DailyRentals AS (
    -- Get count of rentals per customer per film per day
    SELECT c.customer_id,
           c.first_name,
           c.last_name,
           f.film_id,
           f.title,
    DATE (r.rental_date) as rental_day
   , COUNT (*) as rental_count
FROM rental r
    JOIN inventory i
ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN customer c ON r.customer_id = c.customer_id
GROUP BY
    c.customer_id,
    c.first_name,
    c.last_name,
    f.film_id,
    f.title,
    DATE (r.rental_date)
HAVING COUNT (*)
     > 1
    )
SELECT title        as film_title,
       first_name,
       last_name,
       rental_day,
       rental_count as times_rented
FROM DailyRentals
ORDER BY rental_count DESC,
         rental_day,
         last_name,
         first_name;

-- 6. Write a SQL query to return the names of all actors who have appeared in at least one film with every other actor in the database, 
-- along with the number of films they appeared in together.
WITH ActorPairs AS (
    -- Get all pairs of actors who have acted together in films
    SELECT a1.actor_id               as actor1_id,
           a1.first_name             as actor1_first_name,
           a1.last_name              as actor1_last_name,
           a2.actor_id               as actor2_id,
           a2.first_name             as actor2_first_name,
           a2.last_name              as actor2_last_name,
           COUNT(DISTINCT f.film_id) as films_together
    FROM actor a1
             JOIN film_actor fa1 ON a1.actor_id = fa1.actor_id
             JOIN film f ON fa1.film_id = f.film_id
             JOIN film_actor fa2 ON f.film_id = fa2.film_id
             JOIN actor a2 ON fa2.actor_id = a2.actor_id
    WHERE a1.actor_id < a2.actor_id -- Avoid duplicate pairs
    GROUP BY a1.actor_id, a1.first_name, a1.last_name,
             a2.actor_id, a2.first_name, a2.last_name),
     ActorCollaborations AS (
         -- For each actor, count distinct collaborators and total films
         SELECT a.actor_id,
                a.first_name,
                a.last_name,
                COUNT(DISTINCT CASE
                                   WHEN a.actor_id = ap.actor1_id THEN ap.actor2_id
                                   WHEN a.actor_id = ap.actor2_id THEN ap.actor1_id
                    END)                         as collaborator_count,
                (SELECT COUNT(*) - 1 FROM actor) as total_possible_collaborators
         FROM actor a
                  LEFT JOIN (SELECT actor1_id, actor2_id
                             FROM ActorPairs
                             UNION ALL
                             SELECT actor2_id, actor1_id
                             FROM ActorPairs) ap ON a.actor_id IN (ap.actor1_id, ap.actor2_id)
         GROUP BY a.actor_id, a.first_name, a.last_name)
SELECT ac.first_name,
       ac.last_name,
       GROUP_CONCAT(
               CONCAT(
                       CASE
                           WHEN ac.actor_id = ap.actor1_id THEN
                               CONCAT(ap.actor2_first_name, ' ', ap.actor2_last_name, ' (', ap.films_together,
                                      ' films)')
                           ELSE
                               CONCAT(ap.actor1_first_name, ' ', ap.actor1_last_name, ' (', ap.films_together,
                                      ' films)')
                           END
               ) ORDER BY ap.films_together DESC
            SEPARATOR ', '
       ) as collaborations
FROM ActorCollaborations ac
         LEFT JOIN ActorPairs ap ON ac.actor_id IN (ap.actor1_id, ap.actor2_id)
WHERE ac.collaborator_count = ac.total_possible_collaborators
GROUP BY ac.actor_id, ac.first_name, ac.last_name
ORDER BY ac.last_name, ac.first_name;

-- 7. Write a SQL query to return the names of all customers who have rented at least one film from each category in the database,
-- along with the number of films rented from each category.
WITH CustomerCategoryRentals AS (
    -- Get count of films rented by each customer in each category
    SELECT c.customer_id,
           c.first_name,
           c.last_name,
           cat.category_id,
           cat.name                  as category_name,
           COUNT(DISTINCT f.film_id) as films_rented
    FROM customer c
             JOIN rental r ON c.customer_id = r.customer_id
             JOIN inventory i ON r.inventory_id = i.inventory_id
             JOIN film f ON i.film_id = f.film_id
             JOIN film_category fc ON f.film_id = fc.film_id
             JOIN category cat ON fc.category_id = cat.category_id
    GROUP BY c.customer_id,
             c.first_name,
             c.last_name,
             cat.category_id,
             cat.name),
     CustomersWithAllCategories AS (
         -- Get customers who have rented from all categories
         SELECT DISTINCT customer_id,
                         first_name,
                         last_name
         FROM CustomerCategoryRentals
         GROUP BY customer_id, first_name, last_name
         HAVING COUNT(DISTINCT category_id) = (SELECT COUNT(*) FROM category))
SELECT cwac.first_name,
       cwac.last_name,
       GROUP_CONCAT(
               CONCAT(ccr.category_name, ': ', ccr.films_rented, ' films') ORDER BY ccr.category_name
            SEPARATOR ', '
       ) as rental_breakdown
FROM CustomersWithAllCategories cwac
         JOIN CustomerCategoryRentals ccr ON cwac.customer_id = ccr.customer_id
GROUP BY cwac.customer_id, cwac.first_name, cwac.last_name
ORDER BY cwac.last_name, cwac.first_name;

-- 8. Write a SQL query to return the titles of all films in the database that have been rented more than 100 times,
-- but have never been rented by any customer who has rented a film with a rating of 'G'.
WITH FrequentlyRentedFilms AS (
    -- Get films rented more than 100 times
    SELECT f.film_id,
           f.title,
           COUNT(*) as rental_count
    FROM film f
             JOIN inventory i ON f.film_id = i.film_id
             JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY f.film_id, f.title
    HAVING COUNT(*) > 100),
     CustomersWhoRentedG AS (
         -- Get customers who have rented G-rated films
         SELECT DISTINCT r.customer_id
         FROM rental r
                  JOIN inventory i ON r.inventory_id = i.inventory_id
                  JOIN film f ON i.film_id = f.film_id
         WHERE f.rating = 'G')
SELECT frf.title,
       frf.rental_count
FROM FrequentlyRentedFilms frf
WHERE NOT EXISTS (
    -- Exclude films that have been rented by customers who've rented G-rated films
    SELECT 1
    FROM rental r
             JOIN inventory i ON r.inventory_id = i.inventory_id
             JOIN CustomersWhoRentedG cwrg ON r.customer_id = cwrg.customer_id
    WHERE i.film_id = frf.film_id)
ORDER BY frf.rental_count DESC, frf.title;

-- 9. Write a SQL query to return the names of all customers who have rented a film from a category they have never rented from before,
-- and have also never rented a film longer than 3 hours.
WITH CustomerCategories AS (
    -- Get all categories each customer has rented from before
    SELECT DISTINCT r.customer_id,
                    fc.category_id,
                    r.rental_date
    FROM rental r
             JOIN inventory i ON r.inventory_id = i.inventory_id
             JOIN film f ON i.film_id = f.film_id
             JOIN film_category fc ON f.film_id = fc.film_id),
     FirstTimeCategories AS (
         -- Find rentals where customer rented from a new category
         SELECT cc1.customer_id,
                cc1.rental_date,
                cc1.category_id
         FROM CustomerCategories cc1
         WHERE NOT EXISTS (SELECT 1
                           FROM CustomerCategories cc2
                           WHERE cc2.customer_id = cc1.customer_id
                             AND cc2.category_id = cc1.category_id
                             AND cc2.rental_date < cc1.rental_date))
SELECT DISTINCT c.first_name,
                c.last_name,
                cat.name as new_category_name, DATE (ftc.rental_date) as rental_date
FROM FirstTimeCategories ftc
    JOIN customer c
ON ftc.customer_id = c.customer_id
    JOIN category cat ON ftc.category_id = cat.category_id
WHERE c.customer_id NOT IN (
-- Exclude customers who have rented films longer than 3 hours
    SELECT DISTINCT r.customer_id
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    WHERE f.length
    > 180
    )
ORDER BY
    c.last_name,
    c.first_name,
    ftc.rental_date;

-- 10. Write a SQL query to return the names of all actors who have appeared in a film with a rating of 'PG-13' and a length of more than 2 hours,
-- and have also appeared in a film with a rating of 'R' and a length of less than 90 minutes.
SELECT DISTINCT a.first_name, a.last_name
FROM actor a
         JOIN film_actor fa ON a.actor_id = fa.actor_id
         JOIN film f ON fa.film_id = f.film_id
WHERE a.actor_id IN (
    -- Actors in PG-13 films over 2 hours
    SELECT DISTINCT fa2.actor_id
    FROM film_actor fa2
             JOIN film f2 ON fa2.film_id = f2.film_id
    WHERE f2.rating = 'PG-13'
      AND f2.length > 120)
  AND a.actor_id IN (
    -- Actors in R-rated films under 90 minutes
    SELECT DISTINCT fa3.actor_id
    FROM film_actor fa3
             JOIN film f3 ON fa3.film_id = f3.film_id
    WHERE f3.rating = 'R'
      AND f3.length < 90)
ORDER BY a.last_name, a.first_name;

-- LEVEL 4
-- 1. Write a SQL query to update the rental rate of all films in the database that have been rented more than 100 times,
-- setting the new rental rate to be 10% higher than the current rate.
UPDATE film f
SET rental_rate = rental_rate * 1.1
WHERE film_id IN (
    -- Films rented more than 100 times
    SELECT i.film_id
    FROM inventory i
             JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY i.film_id
    HAVING COUNT(*) > 100);

-- 2. Write a SQL query to update the rental duration of all films in the database that have been rented more than 5 times,
-- setting the new duration to be 5% longer than the current duration.

UPDATE film f
SET length = length * 1.05
WHERE film_id IN (
    -- Films rented more than 5 times
    SELECT i.film_id
    FROM inventory i
             JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY i.film_id
    HAVING COUNT(*) > 5);

-- 3. Write a SQL query to update the rental rate of all films in the 'Action' category that were released before the year 2005,
-- setting the new rate to be 20% higher than the current rate.
UPDATE film f
SET rental_rate = rental_rate * 1.2
WHERE film_id IN (
    -- Action films released before 2005
    SELECT fc.film_id
    FROM film_category fc
             JOIN category c ON fc.category_id = c.category_id
             JOIN film f2 ON fc.film_id = f2.film_id
    WHERE c.name = 'Action'
      AND f2.release_year < 2005);

-- 4. Write a SQL query to update the email address of all customers who have rented a film from the 'Horror' category in the month of October 2022,
-- setting the new email address to be a combination of their current email address and the string 'horrorlover'.
UPDATE customer c
SET email = CONCAT(SUBSTRING_INDEX(email, '@', 1), '_horrorlover@', SUBSTRING_INDEX(email, '@', -1))
WHERE customer_id IN (
    -- Customers who rented Horror films in October 2022
    SELECT DISTINCT r.customer_id
    FROM rental r
             JOIN inventory i ON r.inventory_id = i.inventory_id
             JOIN film_category fc ON i.film_id = fc.film_id
             JOIN category cat ON fc.category_id = cat.category_id
    WHERE cat.name = 'Horror'
      AND r.rental_date >= '2022-10-01'
      AND r.rental_date < '2022-11-01');

-- 5. Write a SQL query to update the rental rate of all films in the database that have been rented by more than 10 customers,
-- setting the new rate to be 5% higher than the current rate, but not higher than $4.00.
UPDATE film f
SET rental_rate = LEAST(rental_rate * 1.05, 4.00)
WHERE film_id IN (
    -- Films rented by more than 10 distinct customers
    SELECT i.film_id
    FROM inventory i
             JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY i.film_id
    HAVING COUNT(DISTINCT r.customer_id) > 10);

-- 6. Write a SQL query to update the rental rate of all films in the database that have a rating of 'PG-13' and a length of more than 2 hours,
-- setting the new rate to be $3.50.
UPDATE film f
SET rental_rate = 3.50
WHERE rating = 'PG-13'
  AND length > 120;

-- 7. Write a SQL query to update the rental duration of all films in the 'Sci-Fi' category that were released in the year 2010,
-- setting the new duration to be equal to the length of the film in minutes.
UPDATE film f
SET rental_duration = length
WHERE film_id IN (
    -- Sci-Fi films from 2010
    SELECT fc.film_id
    FROM film_category fc
             JOIN category c ON fc.category_id = c.category_id
             JOIN film f2 ON fc.film_id = f2.film_id
    WHERE c.name = 'Sci-Fi'
      AND f2.release_year = 2010);

-- 8. Write a SQL query to update the address of all customers who live in the same city as another customer with the same last name,
-- setting the new address to be the concatenation of their current address and the string 'samecity'.
UPDATE address a
SET address = CONCAT(address, ' samecity')
WHERE address_id IN (
    -- Get addresses of customers who share a city with someone of same last name
    SELECT DISTINCT a1.address_id
    FROM customer c1
             JOIN address a1 ON c1.address_id = a1.address_id
             JOIN city ci1 ON a1.city_id = ci1.city_id
    WHERE EXISTS (SELECT 1
                  FROM customer c2
                           JOIN address a2 ON c2.address_id = a2.address_id
                           JOIN city ci2 ON a2.city_id = ci2.city_id
                  WHERE c1.customer_id != c2.customer_id
                AND c1.last_name = c2.last_name
                AND ci1.city_id = ci2.city_id));

-- 9. Write a SQL query to update the rental rate of all films in the 'Comedy' category that were released in the year 2007 or later,
-- setting the new rate to be 15% lower than the current rate.
UPDATE film f
SET rental_rate = rental_rate * 0.85
WHERE film_id IN (
    -- Comedy films from 2007 or later
    SELECT fc.film_id
    FROM film_category fc
             JOIN category c ON fc.category_id = c.category_id
             JOIN film f2 ON fc.film_id = f2.film_id
    WHERE c.name = 'Comedy'
      AND f2.release_year >= 2007);

-- 10. Write a SQL query to update the rental rate of all films in the database that have a rating of 'G' and a length of less than 1 hour,
-- setting the new rate to be $1.50.
UPDATE film f
SET rental_rate = 1.50
WHERE rating = 'G'
  AND length < 60;
